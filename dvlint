#!/usr/bin/env node
'use strict';

const DVLinter = require('pingone-davinci-linter')
const { version } = require('./package.json');
const { Command } = require('commander');
const program = new Command();

program
  .name('dvlint')
  .description('CLI to PingOne DaVinci Linter')
  .version(version);

program
  .option('-f, --flow <flow.json>', 'flow.json, as exported from DaVcinci')
  .option('-i, --includeRule <ruleName>', 'specify specific rule to include')
  // .option('-e, --includeRule <ruleName>', 'specify specific rule to include')
  .option('-j, --json', 'return json in output')
  .option('-t, --table', 'return table in output. (default)')
  .option('-c, --lintCodes', 'print lint codes table')
  .option('-r, --lintRules', 'print lint rules table')
  .parse();

const options = program.opts();

// If json isn't set, then we need to always print the table
options.table = !options.json;

if (options.flow) {
  if (options.table) {
    console.log(`
  --------------------------------
   Linting Flow: ${options.flow}
           Rule: ${options.includeRule || "ALL"}
  --------------------------------
  `);
  }

  const linter = new DVLinter(require(`./${options.flow}`));
  const result = linter.lintFlow(
    {
      rules: options.includeRule ? [options.includeRule] : undefined
    }
  )

  if (options.json) {
    console.log(JSON.stringify(result, null, 2));
  } else if (options.table) {
    console.log(linter.getTable());
  }

  process.exit(result.pass ? 0 : 1);
}

if (options.lintCodes) {
  if (options.json) {
    console.log(DVLinter.getCodes());
  } else if (options.table) {
    console.log(DVLinter.getCodesTable());
  }
}

if (options.lintRules) {
  if (options.json) {
    console.log(DVLinter.getRules());
  } else if (options.table) {
    console.log(DVLinter.getRulesTable());
  }
}