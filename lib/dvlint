#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */

const fs = require("fs");
const { Command } = require("commander");
const DVLinter = require("./PingOneDaVinciLinter");
const { version } = require("../package.json");

const program = new Command();

program
  .name("dvlint")
  .description("CLI to PingOne DaVinci Linter")
  .version(version);

program
  .option("-f, --flow <flow.json>", "flow.json, as exported from DaVinci")
  .option(
    "-C, --clean <clean-flow.json>",
    "clean-flow.json, as cleaned DaVinci flow after rules are applied"
  )
  .option("-R, --rulePacks <rulePack...>", "specify a set of rulePacks to use")
  .option(
    "-i, --includeRule <ruleName>",
    "specify specific rule(s) to include - comma separated list"
  )
  .option(
    "-e, --excludeRule <ruleName>",
    "specify specific rule(s) to exclude - comma separated list"
  )
  .option(
    "-g, --ignoreRule <ruleName>",
    "specify specific rule(s) to ignore - comma separated list"
  )
  .option("-j, --json", "return json in output")
  .option("-t, --table", "return table in output. (default)")
  .option("-c, --lintCodes", "print lint codes table")
  .option("-r, --lintRules", "print lint rules table")
  .option("-n, --noColor", "print table with no color")
  .option("-a, --ascii", "print table with ascii characters")
  .parse();

const options = program.opts();

// If json isn't set, then we need to always print the table
options.table = !options.json;

const color = options.noColor !== true;
const border = options.ascii ? "ramac" : "honeywell";

const rulePacks = [];
if (options.rulePacks) {
  options.rulePacks.forEach((rulePack) => {
    if (rulePack.startsWith("/") || rulePack.startsWith("git")) {
      rulePacks.push(rulePack);
    } else {
      // rulePacks.push(`${process.cwd()}/${rulePack}`);
      rulePacks.push(rulePack);
    }
  });
} else {
  rulePacks.push("linter-davinci-base-pack");
}

const linter = new DVLinter({
  directory: __dirname,
  rulePacks,
});

if (options.flow) {
  let flowPath = options.flow;

  if (!flowPath.startsWith("/")) {
    flowPath = `${process.cwd()}/${flowPath}`;
  }

  // eslint-disable-next-line import/no-dynamic-require, global-require
  const inputFlow = require(flowPath);

  try {
    if (typeof inputFlow !== "object") {
      throw new Error("Invalid DaVinci JSON file.");
    }

    if (!inputFlow.flowId && !inputFlow.flows) {
      throw new Error("Invalid DaVinci JSON file.  Missing companyId.");
    }
  } catch (e) {
    console.error(`Flow '${flowPath}' must be a valid DaVinci JSON file.`);
    process.exit(1);
  }

  let containsSubflows = true;
  if (inputFlow.flowId) {
    containsSubflows = false;
  }

  if (options.table) {
    console.log(`
--------------------------------
Linting File: ${options.flow}
  Clean File: ${options.clean || "--no-clean--"}
       Rules: ${options.includeRule || "ALL"}
     Exclude: ${options.excludeRule || "NONE"}
      Ignore: ${options.ignoreRule || "NONE"}
--------------------------------
    `);
  }

  const result = linter.lintFlow(inputFlow, {
    includeRules: options.includeRule ? options.includeRule : undefined,
    excludeRules: options.excludeRule ? options.excludeRule : undefined,
    ignoreRules: options.ignoreRule ? options.ignoreRule : undefined,
    cleanFlow: options.clean !== undefined,
  });

  if (options.json) {
    console.log(JSON.stringify(result, null, 2));
  } else if (options.table) {
    console.log(linter.getTable({ color, border }));
  }

  if (options.clean) {
    let cleanFlow = {};
    if (containsSubflows) {
      cleanFlow.flows = linter.allFlows;
      cleanFlow.companyId = "";
      cleanFlow.customerId = "";
    } else {
      [cleanFlow] = linter.allFlows;
    }

    fs.writeFileSync(options.clean, JSON.stringify(cleanFlow, null, 2));
  }

  process.exit(result.pass ? 0 : 1);
}

if (options.lintCodes) {
  if (options.json) {
    console.log(linter.getCodes("json"));
  } else if (options.table) {
    console.log(linter.getCodes());
  }
}

if (options.lintRules) {
  if (options.json) {
    console.log(linter.getRules("json"));
  } else if (options.table) {
    console.log(linter.getRules());
  }
}
